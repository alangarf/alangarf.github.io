<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FromOrbit.com</title>
    <description>Generic nerd who dabbles in programming, electronics, CNC and retro computing.
</description>
    <link>http://fromorbit.com/</link>
    <atom:link href="http://fromorbit.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 06 Apr 2017 00:49:59 +1000</pubDate>
    <lastBuildDate>Thu, 06 Apr 2017 00:49:59 +1000</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>Ugh! I need UV - Retro Challenge 2017/04</title>
        <description>&lt;p&gt;So I set out to make the LED blink a merry blink tonight, but was finally thwarted when I came to the realisation I’d need UV light to erase the EPROMs to load my code in. Suffice to say this was mighty frustrating.&lt;/p&gt;

&lt;p&gt;I’m getting ahead of the story, so let’s start from the beginning&lt;/p&gt;

&lt;h1 id=&quot;the-beginning&quot;&gt;The beginning&lt;/h1&gt;

&lt;p&gt;Starting tonight with a goal to have “something” running on this board before I went to bed I started sorting out my development environment. Setting up the required software and tools to get the job done so to speak.&lt;/p&gt;

&lt;p&gt;I installed all the GNU m68k tools. I made a nice little Makefile to assemble my assembly…&lt;/p&gt;

&lt;div class=&quot;language-make highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;M68K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;m68k-linux-gnu
&lt;span class=&quot;nv&quot;&gt;AS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$(M68K)&lt;/span&gt;-as
&lt;span class=&quot;nv&quot;&gt;LD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$(M68K)&lt;/span&gt;-ld
&lt;span class=&quot;nv&quot;&gt;DUMP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$(M68K)&lt;/span&gt;-objdump

&lt;span class=&quot;nv&quot;&gt;START&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x00
&lt;span class=&quot;nv&quot;&gt;FMT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;binary
&lt;span class=&quot;c&quot;&gt;#FMT=ihex
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CPU&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;-m68000

&lt;span class=&quot;nv&quot;&gt;SRCS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;blink.s
&lt;span class=&quot;nv&quot;&gt;OBJS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SRCS:.s&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;.o&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;MAIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;blink.bin

&lt;span class=&quot;nl&quot;&gt;.PHONY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dump clean&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;nf&quot;&gt;$(MAIN)&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;@echo&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Builds&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;blink.bin&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;$(MAIN)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(OBJS)&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;$(LD)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$(START)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;--oformat&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$(FMT)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$(MAIN)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$(OBJS)&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;.s.o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;$(AS)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$(CPU)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$@&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&amp;lt;&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;clean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;*.o&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$(MAIN)&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;nf&quot;&gt;$(MAIN)&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;$(DUMP)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$(CPU)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;--disassemble-all&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;--target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$(FMT)&lt;/span&gt; --start-address&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$(START)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(MAIN)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I even bashed together a little test program to twiddle the LED bit of the 74LS259…&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-asm&quot;&gt;/*
 * Blink LED connected to 74LS259 output.
 *
 * ROM is at 0x00000-0x0FA00.
 * RAM is at 0x20000-0x2FA00
 * 74LS259 is at 0x60000.
 */

.equ PORT, 0x60000

/* Iterations of delay loop before updating output value */
.equ DELAY, 50000

.org 0
    /* set initial SSP (supervisor stack pointer) */
    .byte 0, 0, 0, 0

    /* set the program counter */
    .byte 0, 0, 4, 0

.org 0x400
    move.l #PORT, %a0

.top:
    move.b #0x0E, %d0   /* set Q7 to low in the addressable latch mode */
    move.b %d0, (%a0)   /* write to 'LS259 */

    move.l #DELAY, %d1
.delay1:
    tst.l %d1
    beq .delay1end
    subq.l #1, %d1
    jmp .delay1

.delay1end:
    move.b #0x0F, %d0   /* set Q7 to high in the addressable latch mode */
    move.b %d0, (%a0)   /* write to 'LS259 */

    move.l #DELAY, %d1
.delay2:
    tst.l %d1
    beq .delay2end
    subq.l #1, %d1
    jmp .delay2

.delay2end:
    jmp .top

.org 0xFFFA
    jmp .top
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And like a late night TV shopping channel ad I’ll even throw in a &lt;del&gt;free set of steak knives&lt;/del&gt; tool to split the resulting binary into 32KB interleaved chunks so they’d work on the board.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python3&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;argparse&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argparse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArgumentParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;src&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;even_fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;even-{}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;odd_fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;odd-{}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'rb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;even_fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'wb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;even&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;odd_fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'wb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEEK_END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;src_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;odd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;even&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Also by one get one free; I upgraded the software for the Minipro TL866 on OSX. I even figured out the magic device type for my EPROMs.&lt;/p&gt;

&lt;h1 id=&quot;then-it-happened&quot;&gt;Then it happened…&lt;/h1&gt;

&lt;p&gt;I went and tried to write the first “even” binary to the EPROM…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ minipro -p &quot;27C256 @DIP28 #2&quot; -w even-blink.bin
Found Minipro TL866A v03.2.72
Chip ID OK: 0x298c
Writing Code... OK
Reading Code... OK
Verification failed at 0x200: 0x20 != 0x00
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;COMPUTER SAYS NO…&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;beware-losing-all-hope&quot;&gt;Beware, losing all hope…&lt;/h1&gt;

&lt;p&gt;Damn it! I forgot I need to erase these things first.&lt;/p&gt;

&lt;p&gt;Hunting around the garage for any source of UV I knew my search was futile. I even resorted to madness when I found a big bag of “UV” LEDs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-04-06/uv_madness.png&quot; alt=&quot;UGH, my world for UV&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;so-now-what&quot;&gt;So, now what…&lt;/h1&gt;

&lt;p&gt;Well I’ll need to figure out a source of UV. However I also figured I’d just buy some newer flash based EEPROMs in the mean time. Element14 have them in stock locally and I should see them before the weekend hopefully.&lt;/p&gt;

&lt;p&gt;I ordered two &lt;a href=&quot;http://www.microchip.com/wwwproducts/en/AT28C256&quot;&gt;AT28C256&lt;/a&gt;s, which are 98% pin compatible and fast enough for this board. I need to hack a pin swap between pin 1 and 27, but that’s a small price to pay I guess.&lt;/p&gt;

&lt;p&gt;Still very disappointed, and my wife is likely to kill me when I sneak into be at 1:00am. Wouldn’t be so bad if I had the taste of victory instead of the bitter pill of defeat.&lt;/p&gt;

&lt;p&gt;I put up a good fight.&lt;/p&gt;

&lt;p&gt;But UV got the better of me.&lt;/p&gt;

&lt;p&gt;Here’s to tomorrow!&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Apr 2017 00:00:00 +1000</pubDate>
        <link>http://fromorbit.com/2017/04/06/m68k-why-no-uv-rc201704.html</link>
        <guid isPermaLink="true">http://fromorbit.com/2017/04/06/m68k-why-no-uv-rc201704.html</guid>
        
        
      </item>
    
      <item>
        <title>Got together a schematic today - Retro Challenge 2017/04</title>
        <description>&lt;p&gt;Quick one today, I worked on the schematic a little more. Still a few unknowns
and a couple of holes I’ve not filled in yet, but the schematic is 80%
complete. At least to a point where I can get a ROM monitor etc running and
know where all the hardware is and have a good certainty I’m not talking in the
breeze when I start trying to control the hardware.&lt;/p&gt;

&lt;p&gt;I’ve also been working on a simulator for this board using the &lt;a href=&quot;https://github.com/kstenerud/Musashi&quot;&gt;Musashi 68000
core&lt;/a&gt; in C. I’ve built up the address
map, and started writting modules to simulate the hardware. This will help me
greatly in development as I won’t need to be burning ROMs so often to try
things out initially. A ROM monitor would help a lot too, so I’m weighing up
options given the time I have for the competition and my already terrible
work/life balance.&lt;/p&gt;

&lt;p&gt;Here is a snippet of the UART core I’ve written for the simulator, it sets up the internal registers etc of the UART so the firmware can read and write state to configure the registers. The only bit I’ve not successfully worked out yet is the interrupt priorities, there is something wonky on this boards layout I’ve not figured out with the interrupt. But that’s another days problem.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scc2691_core uarts[2];

void scc2691_reset(void)
{
    for(int i = 0; i &amp;lt; 2; i++) {
        uarts[i].id = i;

        uarts[i].m1 = 0x0;
        uarts[i].m1_flag = 0x0;
        uarts[i].m2 = 0x0;

        uarts[i].csr  = 0x0;
        uarts[i].cr   = 0xA;
        uarts[i].thr  = 0x0;
        uarts[i].acr  = 0x0;
        uarts[i].imr  = 0x0;
        uarts[i].ctur = 0x0;
        uarts[i].ctlr = 0x0;

        uarts[i].sr  = 0x0;
        uarts[i].rhr = 0x0;
        uarts[i].isr = 0x0;
        uarts[i].ctu = 0x0;
        uarts[i].ctl = 0x0;

        uarts[i].cnt_flag = 0;
        uarts[i].cnt_value = 0;

        uarts[i].tx = 0;
        uarts[i].tx_last = time(NULL);
        int_controller_clear(1);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;the-schematic-so-far-&quot;&gt;The schematic so far …&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2017-04-05/schematic.png&quot;&gt;&lt;img src=&quot;/assets/images/2017-04-05/tmb_schematic.png&quot; alt=&quot;AMX board schematic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 05 Apr 2017 00:00:00 +1000</pubDate>
        <link>http://fromorbit.com/2017/04/05/m68k-schematic-rc201704.html</link>
        <guid isPermaLink="true">http://fromorbit.com/2017/04/05/m68k-schematic-rc201704.html</guid>
        
        
      </item>
    
      <item>
        <title>Beeping out the board - Retro Challenge 2017/04</title>
        <description>&lt;p&gt;I first started with this board by pulling off the ROMs and dumping their contents. Being a m68k CPU generally the ROMs are split into odd and even byte streams, and in order to dissassemble them the two ROM images need to be interleaved again. I achieved this with a little bit of python:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python3&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;argparse&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argparse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArgumentParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;odd_file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;even_file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;output&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'wb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;odd_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'rb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;even_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'rb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;even&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;odd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEEK_END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;odd_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;even&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEEK_END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;even_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;even&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;odd_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;even_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ROM images aren't the same size!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;odd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;even&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odd_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;odd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;even&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;odd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;even&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;roming-around-like-its-1995&quot;&gt;ROMing around like it’s 1995&lt;/h1&gt;

&lt;p&gt;I took the two ROM images I dumped and merged them back together using the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ merge.py rom_odd.bin rom_even.bin rom_out.bin
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After verifying the &lt;code class=&quot;highlighter-rouge&quot;&gt;rom_out.bin&lt;/code&gt; using &lt;code class=&quot;highlighter-rouge&quot;&gt;objdump&lt;/code&gt; for the m86k I knew I was on my way.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ m68k-linux-gnu-objdump --disassemble-all --target=binary --architecture=m68k --start-address=0x00 rom_out.bin
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This gave me the disassembled output of the m68k ROM image:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rom_out.bin:     file format binary


Disassembly of section .data:

00000000 &amp;lt;.data&amp;gt;:
       0:	0002 0ff0      	orib #-16,%d2
       4:	0000 0400      	orib #0,%d0

[SNIP]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The first value is the preset value the CPU uses for the SP (stack pointer). So
it looks like it’s up in 0x20000 address space. That’s a good start, looks like
some RAM is up around 0x20000.&lt;/p&gt;

&lt;p&gt;The second address is the init jump point, so the first instruction the CPU
will load is at location 0x400.&lt;/p&gt;

&lt;h1 id=&quot;the-stuff-you-see-in-rom-dumps-&quot;&gt;The stuff you see in ROM dumps …&lt;/h1&gt;

&lt;p&gt;Further digging through the assembly and looking at hex dumps you can start to
see strings (even some funny stuff) and loops testing devices and memory etc.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;00009140: 3131 2100 2a21 3132 2100 5041 5353 0053  11!.*!12!.PASS.S
00009150: 454e 4420 434f 4d4d 414e 4400 5345 4e44  END COMMAND.SEND
00009160: 2053 5452 494e 4700 5055 5348 0056 414c   STRING.PUSH.VAL
00009170: 5545 204f 4600 4445 5649 4345 2053 5441  UE OF.DEVICE STA
00009180: 5455 5300 5245 4345 4956 4520 5052 4f47  TUS.RECEIVE PROG
00009190: 5241 4d00 4841 5645 2050 524f 4752 414d  RAM.HAVE PROGRAM
000091a0: 0053 484f 5720 4445 5649 4345 0043 4f4d  .SHOW DEVICE.COM
000091b0: 5041 5245 2044 4556 4943 4500 5348 4f57  PARE DEVICE.SHOW
000091c0: 2049 4e50 5554 204f 4e00 5348 4f57 2049   INPUT ON.SHOW I
000091d0: 4e50 5554 204f 4646 0041 4d58 2042 5547  NPUT OFF.AMX BUG
000091e0: 003f 0048 454c 5000 4441 5445 0054 494d  .?.HELP.DATE.TIM
000091f0: 4500 5345 5420 4441 5445 0053 4554 2054  E.SET DATE.SET T
00009200: 494d 4500 5645 5253 494f 4e00 4d45 4d4f  IME.VERSION.MEMO
00009210: 5259 0053 4c4f 5400 4841 5645 2043 4f4e  RY.SLOT.HAVE CON
00009220: 5452 4f4c 0053 5953 5445 4d20 5245 5345  TROL.SYSTEM RESE
00009230: 5400 4543 484f 204f 4e00 4543 484f 204f  T.ECHO ON.ECHO O
00009240: 4646 0053 4849 5400 4655 434b 0048 454c  FF.SHIT.FUCK.HEL
00009250: 4c4f 003e 004f 4b00 434f 4e4e 4543 5400  LO.&amp;gt;.OK.CONNECT.
00009260: 5249 4e47 0043 4152 5249 4552 0045 5252  RING.CARRIER.ERR
00009270: 4f52 0044 4941 4c54 4f4e 4500 4255 5359  OR.DIALTONE.BUSY
00009280: 0000 4e56 fffe 422e ffff 4a39 0002 140b  ..NV..B...J9....
00009290: 6712 7000 1039 0002 140b 41f9 0002 140c  g.p..9....A.....
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;beep-beep-beeeeeeeeeep-&quot;&gt;Beep, beep, beeeeeeeeeep …&lt;/h1&gt;

&lt;p&gt;After much looking through the code I had some good ideas where things were but I still didn’t fully understand the address map of the CPU and what devices were going where. So being all DIP packages and only a dual layer board I set out with my Fluke 87 and my pointest of pointy probes and started beeping out traces on the board to get a true account of where all the devices are and what they do.&lt;/p&gt;

&lt;p&gt;I start building up a picture in KiCad of the schematic. Not taking values of components etc, but just the general connections so that many things can become much clearer. I first tackled the address decoding.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2017-04-03/address-decoding.png&quot;&gt;&lt;img src=&quot;/assets/images/2017-04-03/tmb_address-decoding.png&quot; alt=&quot;AMX AXC 68000 address decoding&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So after a lot of beeping and probing I got the address map out:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;| 0x00000       | ROM                    |
| 0x10000       | ROM (addr alias?)      |
| 0x20000       | RAM BANK 1             |
| 0x30000       | RAM BANK 2             |
| 0x40000       | UARTs (2 x SCC2691)    |
| 0x50000       | INPUTs via a 74LS373   |
| 0x60000       | OUTPUTs via a 74LS259  |
| 0x70000       | INPUT via a 74LS373    |
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The first INPUT and OUTPUT addresses are related to the OKI M5832 clock calendar chips 4 bit I/O bus and control lines, and the on-board green status LED. So that’s a good start.&lt;/p&gt;

&lt;p&gt;Need to understand the UARTs a little better, one is standard RS232 the other is a weird RS485 like interface (called AXLink in AMX speak).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2017-04-03/axlink_bus.png&quot;&gt;&lt;img src=&quot;/assets/images/2017-04-03/tmb_axlink_bus.png&quot; alt=&quot;AXLink bus schematic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Anyway, that’s all for today. I’ll crack on with more tomorrow!&lt;/p&gt;

</description>
        <pubDate>Mon, 03 Apr 2017 00:00:00 +1000</pubDate>
        <link>http://fromorbit.com/2017/04/03/m68k-amx-board-rc201704.html</link>
        <guid isPermaLink="true">http://fromorbit.com/2017/04/03/m68k-amx-board-rc201704.html</guid>
        
        
      </item>
    
      <item>
        <title>Retro Challenge 2017/04</title>
        <description>&lt;p&gt;After working with a friend on a Z80 based project I spoke about some SCC2691
UARTs I had from an old board I had saved from a skip bin some 10 years ago. He
asked questions about the board and I described it to him..&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Yeah it’s got a 68000 on it, with what looks like 64KBs of RAM and I don’t
know 32KB or ROM. Looks like there is a clock chip, dual batteries probably
for the clock maybe the RAM, and what looks like a standard RS232 port.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;He quickly said I’d be nuts to tear the board apart and it would make a good
candidate for the RetroChallenge competition. So after very little thought I
considered this as something that might be fun to do. So of course…&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/2017-03-31/amx_axc_master.png&quot;&gt;&lt;img src=&quot;/assets/images/2017-03-31/tmb_amx_axc_master.png&quot; alt=&quot;AMX AXC 68000
Board&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;retrochallenge&quot;&gt;Retrochallenge&lt;/h2&gt;

&lt;p&gt;My already busy life schedule has just gotten busier for the next month. I have
successfully entered the 2017/04 challenge and intend to set to work on the 1st
of April.&lt;/p&gt;

&lt;p&gt;My goals for this project are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reverse engineer the board.
    &lt;ul&gt;
      &lt;li&gt;Work out the memory map and the devices and peripherals on the board.&lt;/li&gt;
      &lt;li&gt;Build enough schematic of the board to understand all the little trick it
might hold.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Build a software simulator for the board using &lt;a href=&quot;https://github.com/kstenerud/Musashi&quot;&gt;a m68k simulator CPU&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;This will include getting the boards own firmware running.&lt;/li&gt;
      &lt;li&gt;Setup a ROM monitor.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Get a ROM monitor going on the board.
    &lt;ul&gt;
      &lt;li&gt;Get the onboard the devices working (calendar, UARTs, LED).&lt;/li&gt;
      &lt;li&gt;Get either BASIC or a FORTH interpreter working.&lt;/li&gt;
      &lt;li&gt;Write a Mandelbrot set program.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’d like to see what can be done with the battery backed up RAM. Perhaps
getting a small OS running would be interesting. Adding additional hardware
will be difficult as there is no “bus expansion” onboard so any additional
hardware would have to sit ontop of the board and replace the RAM or something
to access the address and data lines. But that’s not really going to be part of
the challenge. Just getting a ROM monitor etc will be hard enough. :)&lt;/p&gt;

</description>
        <pubDate>Fri, 31 Mar 2017 00:00:00 +1100</pubDate>
        <link>http://fromorbit.com/2017/03/31/retro-computing-challenge-201704.html</link>
        <guid isPermaLink="true">http://fromorbit.com/2017/03/31/retro-computing-challenge-201704.html</guid>
        
        
      </item>
    
      <item>
        <title>Updating the website...</title>
        <description>&lt;h1 id=&quot;wonders-of-wonders&quot;&gt;Wonders of wonders…&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017-03-30/successkid.jpg&quot; alt=&quot;Success Kid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yes my website is being updated once again.&lt;/p&gt;

&lt;p&gt;After about 5 aborted attempts to rebuild all my old content and get this site up and going again. I’ve finally decided to just start making new content, and if I find the time (and the will) I’ll periodically rebuild the old stuff. The mountain of work to convert (and fix) all the old content was always the largest hurdle to getting this site going again. But NO MORE! No more excuses.&lt;/p&gt;

&lt;p&gt;I now can write content in vim, push it to github and it’s done. No wordpress, no VPS to admin, no image libraries to update (actually I still have that problem dang it).&lt;/p&gt;

&lt;p&gt;Anyway, new year, new content. Who knows it might even stick!&lt;/p&gt;

&lt;p&gt;Cheers,&lt;/p&gt;

&lt;p&gt;-A.&lt;/p&gt;

</description>
        <pubDate>Thu, 30 Mar 2017 00:00:00 +1100</pubDate>
        <link>http://fromorbit.com/2017/03/30/updating-website.html</link>
        <guid isPermaLink="true">http://fromorbit.com/2017/03/30/updating-website.html</guid>
        
        
      </item>
    
      <item>
        <title>Digital Foosball Two</title>
        <description>
</description>
        <pubDate>Sun, 21 Sep 2014 00:00:00 +1000</pubDate>
        <link>http://fromorbit.com/2014/09/21/digital-foosball-two.html</link>
        <guid isPermaLink="true">http://fromorbit.com/2014/09/21/digital-foosball-two.html</guid>
        
        
      </item>
    
      <item>
        <title>Digital Foosball</title>
        <description>
</description>
        <pubDate>Wed, 17 Sep 2014 00:00:00 +1000</pubDate>
        <link>http://fromorbit.com/2014/09/17/digital-foosball.html</link>
        <guid isPermaLink="true">http://fromorbit.com/2014/09/17/digital-foosball.html</guid>
        
        
      </item>
    
      <item>
        <title>The Mini H Quad v2.0 “The Hammer” frame</title>
        <description>&lt;p&gt;This frame is freely available from &lt;a href=&quot;http://untestedprototype.com/&quot;&gt;http://untestedprototype.com/&lt;/a&gt; and is feature packed for something that’s so small.&lt;/p&gt;

&lt;p&gt;I fully intend to FPV this little quad and hopefully be buzzing around my local park.&lt;/p&gt;

&lt;p&gt;Can’t wait! Damn international shipping!&lt;/p&gt;
</description>
        <pubDate>Thu, 21 Nov 2013 00:00:00 +1100</pubDate>
        <link>http://fromorbit.com/2013/11/21/the-mini-h-quad-v2-0-the-hammer-frame.html</link>
        <guid isPermaLink="true">http://fromorbit.com/2013/11/21/the-mini-h-quad-v2-0-the-hammer-frame.html</guid>
        
        
      </item>
    
      <item>
        <title>Papilio DX board</title>
        <description>&lt;style&gt;.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }&lt;/style&gt;
&lt;div class=&quot;embed-container&quot;&gt;    &lt;iframe title=&quot;YouTube video player&quot; width=&quot;640&quot; height=&quot;390&quot; src=&quot;//www.youtube.com/embed/A9hyPe9Ne60&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;p&gt;I found a cool discovery while talking on the phone and fiddling with things on my bench. The cool little Papilio One FPGA board has a perfect fitting random development board from &lt;a href=&quot;http://dx.com&quot;&gt;Deal Extreme&lt;/a&gt; that I just happen to find. They still seem readily available and super useful!&lt;/p&gt;
</description>
        <pubDate>Sun, 27 Oct 2013 00:00:00 +1100</pubDate>
        <link>http://fromorbit.com/2013/10/27/papilio-dx-board.html</link>
        <guid isPermaLink="true">http://fromorbit.com/2013/10/27/papilio-dx-board.html</guid>
        
        
      </item>
    
      <item>
        <title>Initial ZPU muck-about</title>
        <description>&lt;style&gt;.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }&lt;/style&gt;
&lt;div class=&quot;embed-container&quot;&gt;    &lt;iframe title=&quot;YouTube video player&quot; width=&quot;640&quot; height=&quot;390&quot; src=&quot;//www.youtube.com/embed/iBiuEYxKYM8&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;p&gt;This is a fairly boring video of me talking to camera about my ideas on using a ZPU softcore CPU for a project I have on the boil. There is also a bit of a rant about crappy operating systems and vendor tools.&lt;/p&gt;
</description>
        <pubDate>Sat, 25 May 2013 00:00:00 +1000</pubDate>
        <link>http://fromorbit.com/2013/05/25/initial-zpu-muck-about.html</link>
        <guid isPermaLink="true">http://fromorbit.com/2013/05/25/initial-zpu-muck-about.html</guid>
        
        
      </item>
    
  </channel>
</rss>
